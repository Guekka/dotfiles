priority -50

extends texmath
extends tex

global !p

def get_size(snip):
		rows = '*'.join(snip.buffer[snip.line].split("*", 2)[:-1])
		cols = '*'.join(snip.buffer[snip.line].split("*", 2)[-1:])

		int_val = lambda string: int(''.join(s for s in string if s.isdigit()))

		rows = int_val(rows)
		cols = int_val(cols)

		return (rows, cols)

def get_old_spacing(snip):
		index = snip.buffer[snip.line].rfind('\t') + 1
		return snip.buffer[snip.line][:index]

def get_new_line_matrix(add_newline = True):
		ret = r"\\\\"
		if add_newline:
				ret += "\n"
		return ret

def get_indent(old_spacing, depth):
		return old_spacing + depth * '\t'

def create_matrix(snip):
		matrix_str = (snip.buffer[snip.line].split('mat')[0]+'NiceMatrix').strip()

		rows, cols = get_size(snip)
		offset = cols + 1

		old_spacing = get_old_spacing(snip)

		snip.buffer[snip.line] = ''

		final_str = old_spacing + "\\begin{"+matrix_str+"}\n"

		for i in range(rows):
				final_str += get_indent(old_spacing, 1)
				final_str += " & ".join(['$' + str(i * cols + j + offset) for j in range(cols)])

				final_str += get_new_line_matrix()

		final_str += old_spacing + "\\end{"+matrix_str+"}$0"

		snip.expand_anon(final_str)


def create_border_matrix(snip):
		rows, cols = get_size(snip)
		offset = cols + 1

		old_spacing = get_old_spacing(snip)

		snip.buffer[snip.line] = ''

		final_str = old_spacing + r"\begin{pNiceArray}{" + (cols - 1) * 'c' + "|c}[first-row, last-col]\n"

		final_str += get_indent(old_spacing, 1)
		for y in range(cols - 1):
				final_str += "x_{" + str(y + 1) + "} & "

		final_str += "& " + get_new_line_matrix()

		for i in range(rows):
				final_str += get_indent(old_spacing, 1)
				final_str += " & ".join(['$' + str(i * cols + j + offset) for j in range(cols)])
				final_str += " & l_{" + str(i + 1) +  "}"

				if i < rows - 1:
					final_str += get_new_line_matrix()
				else:
					final_str += '\n'

		final_str += old_spacing + r"\end{pNiceArray}" + get_new_line_matrix(add_newline=False) + "$0"

		snip.expand_anon(final_str)

def create_syst_array(snip):
		rows, cols = get_size(snip)
		offset = cols + 1

		old_spacing = get_old_spacing(snip)

		snip.buffer[snip.line] = ''

		final_str = old_spacing + r"\left\{ \begin{matrix}" + '\n'
		for i in range(rows):
				final_str += get_indent(old_spacing, 1)
				final_str += " & ".join(['$' + str(i * cols + j + offset) for j in range(cols)])
				final_str += " & l_{" + str(i + 1) + "}"

				final_str += get_new_line_matrix()

		final_str += r"\end{matrix} \right. $0"

		snip.expand_anon(final_str)

def create_gauss_inverse_matrix(snip):
		rows, cols = get_size(snip)
		cols = cols * 2
		offset = cols + 1

		old_spacing = get_old_spacing(snip)

		snip.buffer[snip.line] = ''

		final_str = old_spacing + r"\begin{pNiceArray}{" 
		final_str += int(cols / 2)  * 'c' + '|' + int(cols / 2)  * 'c' + "}[last-col]\n"

		for i in range(rows):
				final_str += get_indent(old_spacing, 1)
				final_str += " & ".join(['$' + str(i * cols + j + offset) for j in range(cols)])
				final_str += " & l_{" + str(i + 1) +  "}"

				final_str += get_new_line_matrix()

		final_str += old_spacing + r"\end{pNiceArray}" + get_new_line_matrix(add_newline=False) + '$0'

		snip.expand_anon(final_str)

endglobal

pre_expand "create_matrix(snip)"
snippet "pmat\*(\d+)\*(\d+)" "Generate (|[bBpvV])?matrix of *rows* by *columns*" r
endsnippet

pre_expand "create_border_matrix(snip)"
snippet "bormat\*(\d+)\*(\d+)" "Generate border matrix" r
endsnippet

pre_expand "create_syst_array(snip)"
snippet "syst\*(\d+)\*(\d+)" "Generate systeme array" r
endsnippet

priority 100
pre_expand "create_gauss_inverse_matrix(snip)"
snippet "gaussmat\*(\d+)\*(\d+)" "Generate gauss matrix" r
endsnippet
